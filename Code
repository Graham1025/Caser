#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct CDuLNode
{
	int data;
	struct CDuLNode *prior;
	struct CDuLNode *next;
} CDuLNode, *CDuLinkList;

void Create_Joseph_Ring(CDuLinkList *L) {
	int i, j, one;
	//定义一个结构体类型的指针变量
	CDuLinkList p;
	//尾插法需要增加一个指向尾部的指针
	CDuLinkList t;
	printf("请输入要创建元素的个数：");
	scanf("%d", &j);
	//LNode在引入参数时就进行了定义，此时分配LNode个存储空间
	*L = (CDuLinkList)malloc(sizeof(CDuLNode));
	//定义为空的循环链表
	(*L)->next = *L;
	(*L)->prior = *L;
	t = *L;
	printf("\n请按1开始创建链表：");
	scanf("%d", &one);
	//尾插法创建循环链表
	for (i = 0; i < j; i++) {
		p = (CDuLinkList)malloc(sizeof(CDuLNode));
		p->data = i + 65;
		p->next = t->next;
		t->next->prior = p;
		p->prior = t;
		t->next = p;
		//这一步很关键，始终保证该指针指向尾部
		t = p;
	}
	//删除循环链表头节点,仍然保证是双向循环链表
	t->next = (*L)->next;
	(*L)->next->prior = t;
	t = *L;
	*L = (*L)->next;
	free(t);
}

//无头结点双向循环列表的遍历
void Through_List(CDuLinkList T) {
	int i = 0;
	//int num = 0;
	CDuLinkList t;
	t = T;
	printf("\n遍历链表如下：\n");
	do{
		printf("%c ", T->data);
		//num++;
		T = T->next;
	} while (T != t);
	printf("\n");
	//return(num);
}

void move_caeser_value_in_circle(CDuLinkList *D,int M) {
	int i;
	//CDuLinkList p;
	CDuLinkList m;
	m = (*D);
	if (M > 0) {
		for (i = 0; i < M; i++) {
			m = m->next;
		}
	}
	else {
		M = abs(M);
		for (i = 0; i < M; i++) {
			m = m->prior;
		}
	}
	(*D) = m;
	//p = m->next->next;
	//m->next->next = m->next->next->next;
	//free(p);
	//(*D) = m->next->next;
}

int main()
{
	int move;
	CDuLinkList h;
	//创建循环链表
	Create_Joseph_Ring(&h);
	//遍历循环链表
	Through_List(h);
	//传入caeser的偏移值
	printf("\n请输入偏移值：");
	scanf("%d", &move);
	move_caeser_value_in_circle(&h,move);
	Through_List(h);
	printf("\n");
	getchar();
	return 0;
}
